// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// ====================== model User ===============
model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  role      Role     @default(EMPLOYEE)
  createdAt DateTime @default(now())

  requests     Request[]
  approvals    Approval[]    @relation("ManagerApproval")
  procurements Procurement[] @relation("ProcurementOfficer")
}

enum Role {
  EMPLOYEE
  MANAGER
  PROCUREMENT
  ADMIN
}

// ================== End model User ===============

// ================== Employe request ==================

model Request {
  id            String        @id @default(uuid())
  requestNumber String        @unique
  employee      User          @relation(fields: [employeeId], references: [id])
  employeeId    String
  title         String
  description   String?
  priority      Priority
  status        RequestStatus @default(PENDING)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  items       Item[]
  approval    Approval?
  procurement Procurement?
}

model Item {
  id            String  @id @default(uuid())
  request       Request @relation(fields: [requestId], references: [id])
  requestId     String
  itemName      String
  quantity      Int
  unit          String
  specification String?
}

model Approval {
  id         String         @id @default(uuid())
  request    Request        @relation(fields: [requestId], references: [id])
  requestId  String         @unique
  manager    User           @relation("ManagerApproval", fields: [managerId], references: [id])
  managerId  String
  status     ApprovalStatus
  notes      String?
  approvedAt DateTime       @default(now())
}

model Procurement {
  id                   String            @id @default(uuid())
  request              Request           @relation(fields: [requestId], references: [id])
  requestId            String            @unique
  procurementOfficer   User              @relation("ProcurementOfficer", fields: [procurementOfficerId], references: [id])
  procurementOfficerId String
  purchaseOrderNumber  String
  vendorName           String
  status               ProcurementStatus
  deliveryDate         DateTime?
  notes                String?

  receivedByEmployee Boolean   @default(false)
  receivedAt         DateTime?
  receiptNotes       String?
}

enum Priority {
  NORMAL
  HIGH
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
  PROCESSING
  COMPLETED
}

enum ApprovalStatus {
  APPROVED
  REJECTED
}

enum ProcurementStatus {
  ORDERED
  SHIPPED
  DELIVERED
}
